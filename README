From: Daniel Bush 
Updated: Sat May 23 15:52:26 EST 2009
Date: Fri Aug 29 09:18:39 EST 2008
Subject: What is UnitJS?

UnitJS is simplified unit testing framework.
It was originally put together overnight using some of the code
used in JSUnit.net.  By intention, it does not have a lot of the
added features of JSUnit.

UnitJS's main purpose is to allow you to write and collect
together your tests and run them in some desired order; the
results are added to the html page in which the tests have
been embedded.

I want something simple which I can then hack into more
complex or automated solutions as I require.

Currently, UnitJS has to work in the browser environment
(where most javascript lives anyway) and uses the html page
(DOM) to display its results.

CONTACT
-----------------------------------------------------------
Any issues, please contact me: dlb.id.au -at-- gmail.com.


NAMESPACING / PACKAGING
-----------------------------------------------------------
Unitjs follows the guidelines set out in README.modules.html 
and is an example of the application of those guidelines.
The latest standard can be found at:
http://js.web17.com.au/specs/packaging-and-namespacing/index.xhtml


GETTING STARTED
-----------------------------------------------------------
Suppose you have an html file and you project js files and a
file with your tests.
Include the unitjs assertions, then your project and then
your tests:

<html>
  <head>
    <script type="text/javascript" src="path/to/unitjs/assertions.js" ></script>
    <script type="text/javascript" src="your_app.js" ></script>
    <script type="text/javascript" src="your_tests.js" ></script>
  </head>
  <body>
    <input type="button"
      onclick="U.runner.run(testOrder,tests)" />

      NOTES:
      testOrder: is an array of test names.
      tests: is a hash of test names and their functions.

      You could also put your_tests.js in this file etc etc.
  </body>
</html>

(This html file is a rough guide of the layout you should use
and is intended only to give you an idea of what to do.)
In your_tests.js:

  // Reference the unitJS modules.
  var U = $web17_com_au$.unitJS;
  var A = $web17_com_au$.unitJS.assertions;

  var testOrder=[];
  var tests={};

  stmt = "Nice long description of what you're testing..."
  testOrder.push(stmt);
  tests[stmt] = function() {
    A.assert("true should be true", true);
    A.assert(true);
  }
  ... etc ...
  
That should be it.

Peruse assertions.js to see what type of assert functions
are available.

Also see and run (in your browser):
  tests/assertionTests.html 
  examples/examples.html 
which shows unitjs in action testing itself.


Regards,
Daniel Bush
