From: Daniel Bush 
Updated: Tue Jun  9 22:52:31 EST 2009
Date: Fri Aug 29 09:18:39 EST 2008
Subject: What is UnitJS?

UnitJS is simplified unit testing framework.
It was originally put together overnight using some of the
code used in JSUnit.net.  By intention, it does not have a
lot of the added features of JSUnit.
I wanted something simple which I could then hack into more
complex or automated solutions as I required.

UnitJS's main purpose is to allow you to write and collect
together your tests and run them in some desired order; the
results are added to the html page in which the tests have
been embedded.

WARNING: At this early stage most work has been done in
Firefox and no thought has been given at the moment
to providing helpful stack traces in IE or other browsers.
Unitjs does try to help by telling you which assertion
failed or if a general error occured on or before a certain
assertion in your test.

Currently, UnitJS has to work in the browser environment
(where most javascript lives anyway) and uses the html page
(DOM) to display its results.

CONTACT
-----------------------------------------------------------
Any issues, please contact me: dlb.id.au -at-- gmail.com.


NAMESPACING / PACKAGING
-----------------------------------------------------------
Unitjs follows the guidelines set out in README.modules.html 
and is an example of the application of those guidelines.
The latest standard can be found at:
http://js.web17.com.au/specs/packaging-and-namespacing/index.xhtml


DEVELOPERS / IN-DEPTH DOCUMENTATION
-----------------------------------------------------------
To get a good understanding of the code in unitjs.js
and unitjs.printers.js, see unitjs.interfaces.js.  This
file sets out the key interfaces which the various parts
of the unitjs system assume and use to get things done.
This file should not be included for execution even though
it is written in javascript.
Project changes are of course logged to CHANGELOG file.


GETTING STARTED
-----------------------------------------------------------
See exmples/ directory for standalone (examples.html) and
an example using sections.
Note: for compactness, I've put the tests in the html file - 
it would probably be tidier to put them in their own js file.

More generally:
Suppose you have an html file for running your tests and your project js files
and a file with your tests.  Include the unitjs project, then your project
and then your tests into your html file like so:


<html>
  <head>
    <link rel="stylesheet" type="text/css" href="../defaultPrinter.css" media="screen" />
    <script language="JavaScript" type="text/javascript" src="/path/to/unitjs.js"></script>
    <script language="JavaScript" type="text/javascript" src="/path/to/unitjs.printers.js"></script>
    <script type="text/javascript" src="your_app.js" ></script>
    <script type="text/javascript" src="your_tests.js" ></script>
    <script type="text/javascript" >
      var Printer  = $web17_com_au$.unitJS.printers.DefaultPrinter;
      var printer;
      function init() {
        printer = new Printer(document.body);
      }
    </script>
  </head>
  <body onload="init();">
    <input type="button"
      onclick="U.runner.run(testOrder,tests,printer)" />
  </body>
</html>

In your_tests.js:

  var U        = $web17_com_au$.unitJS;
  var A        = $web17_com_au$.unitJS.assertions;
  var Sections = $web17_com_au$.unitJS.Sections;

  var testOrder=[];
  var tests={};

  stmt = "Nice long description of what you're testing..."
  testOrder.push(stmt);
  tests[stmt] = function() {
    A.assert("true should be true", true);
    A.assert(true);
  }
  ... etc ...
  
That should be it.

If you want to use sections to organise a large series of tests into
several smaller labelled series then see examples/examples-with-sections.html
for a simple demonstration.  You can nest sections if you really want to.

Peruse unitjs.interfaces.js to see what type of assert functions
are available (or the actual implementation in unitjs.js).
(TODO: I should document this in a more user-friendly way at some point.)


Regards,
Daniel Bush
