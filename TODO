odds and ends {
  @date: 18-Jul-10

  - Need an example showing upfront vs inline test styles
    (see commit and changelog about this time)
    - maybe do this in templates
  - the code is getting a little messy; what I'd like to do:
    - all tests should be written in sections even if there
      is only one section; so we don't have to choose or
      worry about two different runner functions
      - the basic runner is still the heart but we'll
        give it a less obvious name and use its name for
        the section runner
    - get rid of interfaces and just comment the code as
      appropriate; eg I added a comment about 'nested' flag
      to the runner function
    - the runner should not worry about the printer at all;
      it should just return stats; the section runner can
      fold this into a tree-like structure if we have nested
      sections and return this
      - a printer can treewalk the stats
        - preorder it builds the nested tag structure if
          it wants to display hierachically in (x)html
        - postorder it collates the stats
    - get rid of stats.section.* and stats.*; I think there
      only needs to be one
}

odds and ends {
  @date: 29-Jan-10

  - 'setup' and 'teardown': clearer way to set these up on a per section
    basis
  - a better way to handle testOrder, tests and stmt.
    Currently 'stmt' needs to be unique for each test series.
    It's also quite verbose having to push stmt onto testOrder
    and adding it to the 'tests' hash for each test.
  - Not sure if we already did this, but it's sometimes nice
    to be able to run only one test and disable all the others.
    We'd have some way of notifying the runner to do this
    using a line of code in our tests somewhere.  To get
    normal function back, we just have to remove the line again.

}

highlight empty tests and empty sections {
  @author: DB
  @date: 27-Jan-10
  - be able to flag a section or test as pending; paint in neutral color - blue
  - expand/collapse functions to expand/collapse all sections/subsections -
    without showing the tests
    - expand next level / collapse next level
    - show pending or empty sections and tests
    - collapse all
    - expand all
    - expand all with tests
  - sections with 0 tests should be highlighted in a neutral colour - blue
  - similarly, maybe we could highlight tests with 0 assertions with the same
    colour scheme
  - expand only sections which are empty or contain empty sections or empty
    tests
}

missing tests and stats/section runner re-implementation {
  @author: DB
  @date: 27-Jan-10
  - test stats collection for a series of tests (this might be done already)
  - test stats collection for a section of tests (excl. subsections)
    @DONE: 27-Jan-10
    @note { This is what Section.stats does by default }
  - test stats collection for a section of tests incl subsections
    @DONE: 27-Jan-10
    @note { This is what runner.sections.run returns }
  - test stats merge
  - rewrite the way stats are collected for sections and their subsections
    - at the moment I think as the sections test runner recurses, the stats
      collection also recurses possibly needlessly; that is, calculateStats()
      is inefficient or being inappropriately used.
      The sections runner should probably return stats which we merge.
      @note {
        @date: 27-Jan-10
        Wondering if it's worth it.  The amount of recursion isn't that
        great normally.  We can perhaps make runner.sections.run
        more efficient by passing in a stats instance and aggregating
        as we pop back up from the recursions.
      }
}


Aug-2008 {
@author: DB
1   We don't count errors and fails; and I still need to
    figure out if we are clearly distinguishing between these
    two. [DB]
2   Stack trace is a bit of a mess.  Firefox seems to have the
    best one but it is not being used here (or not a lot)
    because the code uses its own error object
    JsUnitException. [DB]
3   The way 'testOrder' and 'tests' work means that our tests are
    anonymous functions.  This may make tracing errors harder
    if they are in the tests.  Although, anonymous functions
    are handy and get used everywhere so this is just a fact
    of life. [DB]
}
