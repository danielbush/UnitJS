Currently implementing (@May-09) [DB]
------------------------------------

* Returning which assertion has failed
  - This can be shown using the 'comment' provided by the tester.
    Why do we also want to say "5th assert failed for test X" ??
  - It might be a convenience in the event that the tester doesn't bother to
    put comments in his assertions or reuses the comment.
- Assertions counting
  - when we count assertions we may well count internal assertions because an assert*
    function happens to make use of one or more other assert* functions.  Do we worry
    about this?
    - Yes - because I want to be able to say "5th assert failed for test X".
  - We might set a flag which tells the assert function to suppress counting itself
    if it is being used by another assert.  This flag gets set at the start
    of the external assert function and is unset at the end; any calls to asserts
    in between will suppress stats.
    
- Create a ResultPrinter object
  - DefaultPrinter will print the test results in the tests div and append to html page
  - LogPrinter will use the web17 logger to log tests
  - ResultPrinterIf defines an interface that runner.run() expects and which DefaultPrinter 
    and LogPrinter implement.
- Clean up the argument parsing for assertions
  - Currently there are several util methods
      utils.argumentsIncludeComments = function(expectedNumberOfNonCommentArgs, args) {
      utils.commentArg = function(expectedNumberOfNonCommentArgs, args) {
      utils.nonCommentArg = function( desiredNonCommentArgIndex, 
      utils._validateArguments = function(expectedNumberOfNonCommentArgs, args) {
    Not sure if I want to keep it this way.
    The (expectedNumberOfNonCommentArgs, args) interface might be a necessary evil if there
    is some variability in this when calling all the different assertions - is there???
    
* Improved stack trace
* Make sure we fail when we fail and error when we error
* an error should should say ERROR; and a fail should say FAIL
* fail and error stack traces both make use of firefox or ie7 
  stack traces, not the old jsunit stack trace
  * the issue is when an assertion fails, the old jsunit code
    uses its own customised stack trace, which doesn't work
    well with anonymous / modularised javascript.
    We should 
    - record which assertion in the test failed eg 5th assertion in test X
    - throw an error and get its real stack trace just below the failed
      assertion ; unfortunately, this might be quite hard to do.


