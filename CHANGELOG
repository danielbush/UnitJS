
Current - 27-Jan-10
[DB]
* runner.sections.run returns a stats object so we can
  test the resulting stats.
* The unitjs module can spawn a copy of itself; this is
  so we can test unitjs using itself.
  Making nested calls to the runner leads to errors; this
  is because of coupling between the assertions and runner
  submodules in unitjs.
  If we ever get multi-threaded or have a need to make nested
  invocations of runner, we will have to probably decouple.
* Added at least one test where we spawn a separate unitjs
  module and test its results.
* Sections with no tests or tests with no assertions are
  now highlighted in blue colour.
* Sections and tests can be flagged as pending; these are highlighted
  in blue and tagged by the default printer.  Parent sections are also
  highlighted if they contain a pending item.
* DefaultPrinter now has a collapse function to collapse sections;
  expand function to expand sections and/or tests; a function that
  expands only failed or errored tests and a function that expands
  only pending sections or tests.

Version 0.3.1 - 27-Jan-10
[DB]
* UnitJS's own tests now use sections - see tests/.
* Tests are highlighted - red/green.
* Teardown called after error or failure in test
* Fixed some bugs relating to DefaultPrinter and how it resets, uses its div tag(s).
* Sections.add can handle Section and Sections instances.



Version 0.3 - 9-Jun-09
[DB]
* Created interfaces js file for defining key interfaces of unitJS
* Created printer interface and provided one implementation: DefaultPrinter
  Moved all printer code out into a separate file.
  DefaultPrinter also relies on a css file for most formatting.  The test
  output is broken up into divs, spans and p tags with semantic class names.
* Tests can be run as standalone or can be grouped into sections.  Sections can
  be nested.  The DefaultPrinter displays the nested sections in a collapsibe
  format.
* Stats on test results are calculated for each section and also for all that
  section's subsections.
* This project is still very firefox-centric at the moment.
* We haven't written tests for some of the features added here especially
  sections and section stats.
* Object/method labelling is a bit schizophrenic - I like the ruby underscore
  method because it reduces clutter.  But I like using camel case for object
  (class) names and instance methods.

Version 0.2
* An error should should say ERROR; and a fail should say FAIL [DB]
* We can now say: "Xth assertion failed" for a test [DB]
* throw an error and get its real stack trace just below the failed
  assertion for fails
* Fail and error stack traces both make use of firefox
  stack trace (if available), not the old jsunit stack trace [DB]
  * the issue is when an assertion fails, the old jsunit code
    used its own customised stack trace, which didn't work
    well with anonymous functions / modularised javascript.
* Count tests (passes, fails, errors) and total assertions [DB]
* Modularised the unitJS module into several submodules. [DB]
* Implemented namespacing/packaging standard - 
  see http://js.web17.com.au/specs/packaging-and-namespacing/index.xhtml [DB]

Version 0.1
* Project started on 28-Aug-08. [DB]
* Assertions and related support functions have been ported
  from jsunit. [DB]
* Tests of the assertion functions have also been ported
  from jsunit and work on firefox 3 and IE 6. [DB]

